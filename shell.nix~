{ nixpkgs ? import <nixpkgs> {}, compiler ? "default", doBenchmark ? false }:

let

  inherit (nixpkgs) pkgs;
  llm-with-contextSrc = pkgs.fetchFromGitHub {
    owner = "augyg";
    repo =  "llm-with-context";
    rev = "4bc0739d14fcb2474b93ecedaabc727a40f5d5db";
    sha256 = "sha256-6tMKYmfopAl+/0ja/1PNa9aw28BdvzDp5pdc1D1JOpc=";
  };

  llm-with-context = pkgs.haskellPackages.callPackage llm-with-contextSrc {}; 

  istrSrc = pkgs.fetchFromGitHub {
    owner = "augyg";
    repo =  "IStr";
    rev = "711fba57a38752cd22697b715607f6061e398768";
    sha256 = pkgs.lib.fakeSha256;
  };
  
  f = { mkDerivation, base, lib }:
      mkDerivation {
        pname = "scriptwriter";
        version = "0.1.0.0";
        src = ./.;
        isLibrary = false;
        isExecutable = true;
        executableHaskellDepends = [ base llm-with-context ];
        license = lib.licenses.mit;
        mainProgram = "scriptwriter";
      };

  haskellPackages = if compiler == "default"
                       then pkgs.haskellPackages
                       else pkgs.haskell.packages.${compiler};

  variant = if doBenchmark then pkgs.haskell.lib.doBenchmark else pkgs.lib.id;

  drv = variant (haskellPackages.callPackage f {});

in

  if pkgs.lib.inNixShell then drv.env else drv
